// Shader created with Shader Forge v1.38 
// Shader Forge (c) Freya Holmer - http://www.acegikmo.com/shaderforge/
// Note: Manually altering this data may prevent you from opening it in Shader Forge
/*SF_DATA;ver:1.38;sub:START;pass:START;ps:flbk:,iptp:0,cusa:False,bamd:0,cgin:,lico:1,lgpr:1,limd:1,spmd:1,trmd:0,grmd:0,uamb:True,mssp:True,bkdf:False,hqlp:False,rprd:False,enco:False,rmgx:True,imps:True,rpth:0,vtps:0,hqsc:True,nrmq:1,nrsp:0,vomd:0,spxs:False,tesm:0,olmd:1,culm:0,bsrc:0,bdst:1,dpts:2,wrdp:True,dith:0,atcv:False,rfrpo:True,rfrpn:Refraction,coma:15,ufog:True,aust:True,igpj:False,qofs:0,qpre:2,rntp:3,fgom:False,fgoc:False,fgod:False,fgor:False,fgmd:0,fgcr:0.5,fgcg:0.5,fgcb:0.5,fgca:1,fgde:0.01,fgrn:0,fgrf:300,stcl:False,atwp:False,stva:128,stmr:255,stmw:255,stcp:6,stps:0,stfa:0,stfz:0,ofsf:0,ofsu:0,f2p0:False,fnsp:False,fnfb:False,fsmp:False;n:type:ShaderForge.SFN_Final,id:4696,x:34113,y:32688,varname:node_4696,prsc:2|diff-4120-RGB,spec-2689-OUT,gloss-2467-OUT,normal-297-RGB,clip-4120-A,voffset-3387-OUT;n:type:ShaderForge.SFN_Time,id:7790,x:31280,y:32320,varname:node_7790,prsc:2;n:type:ShaderForge.SFN_Multiply,id:7325,x:31606,y:32320,varname:node_7325,prsc:2|A-7790-T,B-2194-OUT;n:type:ShaderForge.SFN_ValueProperty,id:2194,x:31280,y:32486,ptovrint:False,ptlb:Trunk Wind Power,ptin:_TrunkWindPower,varname:node_2194,prsc:2,glob:False,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,v1:0.5;n:type:ShaderForge.SFN_ValueProperty,id:2892,x:31764,y:32380,ptovrint:False,ptlb:Trunk Wind Amplitude,ptin:_TrunkWindAmplitude,varname:node_2892,prsc:2,glob:False,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,v1:0;n:type:ShaderForge.SFN_Sin,id:5238,x:31798,y:32224,varname:node_5238,prsc:2|IN-7325-OUT;n:type:ShaderForge.SFN_Multiply,id:5073,x:32054,y:32224,varname:node_5073,prsc:2|A-5238-OUT,B-2892-OUT;n:type:ShaderForge.SFN_Cos,id:7609,x:31798,y:32465,varname:node_7609,prsc:2|IN-7325-OUT;n:type:ShaderForge.SFN_Multiply,id:9852,x:32034,y:32482,varname:node_9852,prsc:2|A-2892-OUT,B-6441-OUT;n:type:ShaderForge.SFN_Vector1,id:6441,x:31798,y:32601,varname:node_6441,prsc:2,v1:0.5;n:type:ShaderForge.SFN_Multiply,id:4063,x:32217,y:32482,varname:node_4063,prsc:2|A-7609-OUT,B-9852-OUT;n:type:ShaderForge.SFN_VertexColor,id:3138,x:32043,y:32346,varname:node_3138,prsc:2;n:type:ShaderForge.SFN_Multiply,id:2731,x:32305,y:32208,varname:node_2731,prsc:2|A-5073-OUT,B-3138-A;n:type:ShaderForge.SFN_Multiply,id:4479,x:32420,y:32482,varname:node_4479,prsc:2|A-4063-OUT,B-3138-A;n:type:ShaderForge.SFN_Vector1,id:8810,x:32365,y:32367,varname:node_8810,prsc:2,v1:0;n:type:ShaderForge.SFN_Append,id:4297,x:32589,y:32295,varname:node_4297,prsc:2|A-2731-OUT,B-8810-OUT,C-4479-OUT;n:type:ShaderForge.SFN_Add,id:3387,x:33099,y:32330,varname:node_3387,prsc:2|A-4297-OUT,B-2376-OUT;n:type:ShaderForge.SFN_NormalVector,id:8859,x:31798,y:32703,prsc:2,pt:True;n:type:ShaderForge.SFN_Vector4Property,id:9760,x:31950,y:32703,ptovrint:False,ptlb:Leaf Wind Direction,ptin:_LeafWindDirection,varname:node_9760,prsc:2,glob:False,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,v1:1,v2:0.5,v3:0.5,v4:0;n:type:ShaderForge.SFN_Add,id:3232,x:32204,y:32703,varname:node_3232,prsc:2|A-9760-XYZ,B-8859-OUT;n:type:ShaderForge.SFN_Normalize,id:7842,x:32403,y:32703,varname:node_7842,prsc:2|IN-3232-OUT;n:type:ShaderForge.SFN_ValueProperty,id:7225,x:32621,y:32628,ptovrint:False,ptlb:Leaf Wind Amplitude,ptin:_LeafWindAmplitude,varname:node_7225,prsc:2,glob:False,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,v1:0.03;n:type:ShaderForge.SFN_Multiply,id:2376,x:32835,y:32598,varname:node_2376,prsc:2|A-7842-OUT,B-582-R,C-3300-OUT,D-7225-OUT;n:type:ShaderForge.SFN_VertexColor,id:582,x:30665,y:32889,varname:node_582,prsc:2;n:type:ShaderForge.SFN_Pi,id:4935,x:30698,y:33028,varname:node_4935,prsc:2;n:type:ShaderForge.SFN_Time,id:3441,x:30665,y:33153,varname:node_3441,prsc:2;n:type:ShaderForge.SFN_Multiply,id:2955,x:30923,y:33028,varname:node_2955,prsc:2|A-582-R,B-4935-OUT;n:type:ShaderForge.SFN_Multiply,id:6021,x:30923,y:33178,varname:node_6021,prsc:2|A-3441-T,B-7321-OUT;n:type:ShaderForge.SFN_ValueProperty,id:7321,x:30665,y:33354,ptovrint:False,ptlb:Leaf Wind Power,ptin:_LeafWindPower,varname:node_7321,prsc:2,glob:False,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,v1:1.5;n:type:ShaderForge.SFN_Add,id:8007,x:31144,y:33112,varname:node_8007,prsc:2|A-2955-OUT,B-6021-OUT;n:type:ShaderForge.SFN_Multiply,id:6145,x:31341,y:33204,varname:node_6145,prsc:2|A-8007-OUT,B-5832-OUT;n:type:ShaderForge.SFN_Vector1,id:5832,x:31144,y:33281,varname:node_5832,prsc:2,v1:3;n:type:ShaderForge.SFN_Sin,id:6292,x:31533,y:33204,varname:node_6292,prsc:2|IN-6145-OUT;n:type:ShaderForge.SFN_Sin,id:4648,x:31789,y:33056,varname:node_4648,prsc:2|IN-8007-OUT;n:type:ShaderForge.SFN_Multiply,id:742,x:31789,y:33234,varname:node_742,prsc:2|A-6292-OUT,B-9650-OUT;n:type:ShaderForge.SFN_Vector1,id:9650,x:31533,y:33354,varname:node_9650,prsc:2,v1:0.2;n:type:ShaderForge.SFN_Multiply,id:2979,x:31789,y:33405,varname:node_2979,prsc:2|A-8007-OUT,B-5872-OUT;n:type:ShaderForge.SFN_Vector1,id:5872,x:31530,y:33474,varname:node_5872,prsc:2,v1:5;n:type:ShaderForge.SFN_Add,id:8951,x:32070,y:33116,varname:node_8951,prsc:2|A-4648-OUT,B-742-OUT;n:type:ShaderForge.SFN_Cos,id:9124,x:32070,y:33286,varname:node_9124,prsc:2|IN-2979-OUT;n:type:ShaderForge.SFN_Subtract,id:3300,x:32289,y:33172,varname:node_3300,prsc:2|A-8951-OUT,B-9124-OUT;n:type:ShaderForge.SFN_Tex2d,id:4120,x:33816,y:32560,ptovrint:False,ptlb:Base Color,ptin:_BaseColor,varname:node_4120,prsc:2,glob:False,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,ntxv:0,isnm:False;n:type:ShaderForge.SFN_Tex2d,id:297,x:33816,y:32762,ptovrint:False,ptlb:Normal,ptin:_Normal,varname:node_297,prsc:2,glob:False,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,ntxv:3,isnm:True;n:type:ShaderForge.SFN_Slider,id:2689,x:33789,y:32325,ptovrint:False,ptlb:Specular,ptin:_Specular,varname:node_2689,prsc:2,glob:False,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,min:0,cur:0,max:1;n:type:ShaderForge.SFN_Slider,id:2467,x:33789,y:32435,ptovrint:False,ptlb:Gloss,ptin:_Gloss,varname:node_2467,prsc:2,glob:False,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,min:0,cur:0,max:1;proporder:2194-2892-9760-7225-7321-4120-297-2689-2467;pass:END;sub:END;*/

Shader "" {
    Properties {
        _TrunkWindPower ("Trunk Wind Power", Float ) = 0.5
        _TrunkWindAmplitude ("Trunk Wind Amplitude", Float ) = 0
        _LeafWindDirection ("Leaf Wind Direction", Vector) = (1,0.5,0.5,0)
        _LeafWindAmplitude ("Leaf Wind Amplitude", Float ) = 0.03
        _LeafWindPower ("Leaf Wind Power", Float ) = 1.5
        _BaseColor ("Base Color", 2D) = "white" {}
        _Normal ("Normal", 2D) = "bump" {}
        _Specular ("Specular", Range(0, 1)) = 0
        _Gloss ("Gloss", Range(0, 1)) = 0
        [HideInInspector]_Cutoff ("Alpha cutoff", Range(0,1)) = 0.5
    }
    SubShader {
        Tags {
            "Queue"="AlphaTest"
            "RenderType"="TransparentCutout"
        }
        Pass {
            Name "FORWARD"
            Tags {
                "LightMode"="ForwardBase"
            }
            
            
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #define UNITY_PASS_FORWARDBASE
            #include "UnityCG.cginc"
            #include "AutoLight.cginc"
            #pragma multi_compile_fwdbase_fullshadows
            #pragma multi_compile_fog
            #pragma only_renderers d3d9 d3d11 glcore gles 
            #pragma target 3.0
            uniform float4 _LightColor0;
            uniform float _TrunkWindPower;
            uniform float _TrunkWindAmplitude;
            uniform float4 _LeafWindDirection;
            uniform float _LeafWindAmplitude;
            uniform float _LeafWindPower;
            uniform sampler2D _BaseColor; uniform float4 _BaseColor_ST;
            uniform sampler2D _Normal; uniform float4 _Normal_ST;
            uniform float _Specular;
            uniform float _Gloss;
            struct VertexInput {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float2 texcoord0 : TEXCOORD0;
                float4 vertexColor : COLOR;
            };
            struct VertexOutput {
                float4 pos : SV_POSITION;
                float2 uv0 : TEXCOORD0;
                float4 posWorld : TEXCOORD1;
                float3 normalDir : TEXCOORD2;
                float3 tangentDir : TEXCOORD3;
                float3 bitangentDir : TEXCOORD4;
                float4 vertexColor : COLOR;
                LIGHTING_COORDS(5,6)
                UNITY_FOG_COORDS(7)
            };
            VertexOutput vert (VertexInput v) {
                VertexOutput o = (VertexOutput)0;
                o.uv0 = v.texcoord0;
                o.vertexColor = v.vertexColor;
                o.normalDir = UnityObjectToWorldNormal(v.normal);
                o.tangentDir = normalize( mul( unity_ObjectToWorld, float4( v.tangent.xyz, 0.0 ) ).xyz );
                o.bitangentDir = normalize(cross(o.normalDir, o.tangentDir) * v.tangent.w);
                float4 node_7790 = _Time;
                float node_7325 = (node_7790.g*_TrunkWindPower);
                float4 node_3441 = _Time;
                float node_8007 = ((o.vertexColor.r*3.141592654)+(node_3441.g*_LeafWindPower));
                v.vertex.xyz += (float3(((sin(node_7325)*_TrunkWindAmplitude)*o.vertexColor.a),0.0,((cos(node_7325)*(_TrunkWindAmplitude*0.5))*o.vertexColor.a))+(normalize((_LeafWindDirection.rgb+v.normal))*o.vertexColor.r*((sin(node_8007)+(sin((node_8007*3.0))*0.2))-cos((node_8007*5.0)))*_LeafWindAmplitude));
                o.posWorld = mul(unity_ObjectToWorld, v.vertex);
                float3 lightColor = _LightColor0.rgb;
                o.pos = UnityObjectToClipPos( v.vertex );
                UNITY_TRANSFER_FOG(o,o.pos);
                TRANSFER_VERTEX_TO_FRAGMENT(o)
                return o;
            }
            float4 frag(VertexOutput i) : COLOR {
                i.normalDir = normalize(i.normalDir);
                float3x3 tangentTransform = float3x3( i.tangentDir, i.bitangentDir, i.normalDir);
                float3 viewDirection = normalize(_WorldSpaceCameraPos.xyz - i.posWorld.xyz);
                float3 _Normal_var = UnpackNormal(tex2D(_Normal,TRANSFORM_TEX(i.uv0, _Normal)));
                float3 normalLocal = _Normal_var.rgb;
                float3 normalDirection = normalize(mul( normalLocal, tangentTransform )); // Perturbed normals
                float4 _BaseColor_var = tex2D(_BaseColor,TRANSFORM_TEX(i.uv0, _BaseColor));
                clip(_BaseColor_var.a - 0.5);
                float3 lightDirection = normalize(_WorldSpaceLightPos0.xyz);
                float3 lightColor = _LightColor0.rgb;
                float3 halfDirection = normalize(viewDirection+lightDirection);
////// Lighting:
                float attenuation = LIGHT_ATTENUATION(i);
                float3 attenColor = attenuation * _LightColor0.xyz;
///////// Gloss:
                float gloss = _Gloss;
                float specPow = exp2( gloss * 10.0 + 1.0 );
////// Specular:
                float NdotL = saturate(dot( normalDirection, lightDirection ));
                float3 specularColor = float3(_Specular,_Specular,_Specular);
                float3 directSpecular = attenColor * pow(max(0,dot(halfDirection,normalDirection)),specPow)*specularColor;
                float3 specular = directSpecular;
/////// Diffuse:
                NdotL = max(0.0,dot( normalDirection, lightDirection ));
                float3 directDiffuse = max( 0.0, NdotL) * attenColor;
                float3 indirectDiffuse = float3(0,0,0);
                indirectDiffuse += UNITY_LIGHTMODEL_AMBIENT.rgb; // Ambient Light
                float3 diffuseColor = _BaseColor_var.rgb;
                float3 diffuse = (directDiffuse + indirectDiffuse) * diffuseColor;
/// Final Color:
                float3 finalColor = diffuse + specular;
                fixed4 finalRGBA = fixed4(finalColor,1);
                UNITY_APPLY_FOG(i.fogCoord, finalRGBA);
                return finalRGBA;
            }
            ENDCG
        }
        Pass {
            Name "FORWARD_DELTA"
            Tags {
                "LightMode"="ForwardAdd"
            }
            Blend One One
            
            
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #define UNITY_PASS_FORWARDADD
            #include "UnityCG.cginc"
            #include "AutoLight.cginc"
            #pragma multi_compile_fwdadd_fullshadows
            #pragma multi_compile_fog
            #pragma only_renderers d3d9 d3d11 glcore gles 
            #pragma target 3.0
            uniform float4 _LightColor0;
            uniform float _TrunkWindPower;
            uniform float _TrunkWindAmplitude;
            uniform float4 _LeafWindDirection;
            uniform float _LeafWindAmplitude;
            uniform float _LeafWindPower;
            uniform sampler2D _BaseColor; uniform float4 _BaseColor_ST;
            uniform sampler2D _Normal; uniform float4 _Normal_ST;
            uniform float _Specular;
            uniform float _Gloss;
            struct VertexInput {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float2 texcoord0 : TEXCOORD0;
                float4 vertexColor : COLOR;
            };
            struct VertexOutput {
                float4 pos : SV_POSITION;
                float2 uv0 : TEXCOORD0;
                float4 posWorld : TEXCOORD1;
                float3 normalDir : TEXCOORD2;
                float3 tangentDir : TEXCOORD3;
                float3 bitangentDir : TEXCOORD4;
                float4 vertexColor : COLOR;
                LIGHTING_COORDS(5,6)
                UNITY_FOG_COORDS(7)
            };
            VertexOutput vert (VertexInput v) {
                VertexOutput o = (VertexOutput)0;
                o.uv0 = v.texcoord0;
                o.vertexColor = v.vertexColor;
                o.normalDir = UnityObjectToWorldNormal(v.normal);
                o.tangentDir = normalize( mul( unity_ObjectToWorld, float4( v.tangent.xyz, 0.0 ) ).xyz );
                o.bitangentDir = normalize(cross(o.normalDir, o.tangentDir) * v.tangent.w);
                float4 node_7790 = _Time;
                float node_7325 = (node_7790.g*_TrunkWindPower);
                float4 node_3441 = _Time;
                float node_8007 = ((o.vertexColor.r*3.141592654)+(node_3441.g*_LeafWindPower));
                v.vertex.xyz += (float3(((sin(node_7325)*_TrunkWindAmplitude)*o.vertexColor.a),0.0,((cos(node_7325)*(_TrunkWindAmplitude*0.5))*o.vertexColor.a))+(normalize((_LeafWindDirection.rgb+v.normal))*o.vertexColor.r*((sin(node_8007)+(sin((node_8007*3.0))*0.2))-cos((node_8007*5.0)))*_LeafWindAmplitude));
                o.posWorld = mul(unity_ObjectToWorld, v.vertex);
                float3 lightColor = _LightColor0.rgb;
                o.pos = UnityObjectToClipPos( v.vertex );
                UNITY_TRANSFER_FOG(o,o.pos);
                TRANSFER_VERTEX_TO_FRAGMENT(o)
                return o;
            }
            float4 frag(VertexOutput i) : COLOR {
                i.normalDir = normalize(i.normalDir);
                float3x3 tangentTransform = float3x3( i.tangentDir, i.bitangentDir, i.normalDir);
                float3 viewDirection = normalize(_WorldSpaceCameraPos.xyz - i.posWorld.xyz);
                float3 _Normal_var = UnpackNormal(tex2D(_Normal,TRANSFORM_TEX(i.uv0, _Normal)));
                float3 normalLocal = _Normal_var.rgb;
                float3 normalDirection = normalize(mul( normalLocal, tangentTransform )); // Perturbed normals
                float4 _BaseColor_var = tex2D(_BaseColor,TRANSFORM_TEX(i.uv0, _BaseColor));
                clip(_BaseColor_var.a - 0.5);
                float3 lightDirection = normalize(lerp(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz - i.posWorld.xyz,_WorldSpaceLightPos0.w));
                float3 lightColor = _LightColor0.rgb;
                float3 halfDirection = normalize(viewDirection+lightDirection);
////// Lighting:
                float attenuation = LIGHT_ATTENUATION(i);
                float3 attenColor = attenuation * _LightColor0.xyz;
///////// Gloss:
                float gloss = _Gloss;
                float specPow = exp2( gloss * 10.0 + 1.0 );
////// Specular:
                float NdotL = saturate(dot( normalDirection, lightDirection ));
                float3 specularColor = float3(_Specular,_Specular,_Specular);
                float3 directSpecular = attenColor * pow(max(0,dot(halfDirection,normalDirection)),specPow)*specularColor;
                float3 specular = directSpecular;
/////// Diffuse:
                NdotL = max(0.0,dot( normalDirection, lightDirection ));
                float3 directDiffuse = max( 0.0, NdotL) * attenColor;
                float3 diffuseColor = _BaseColor_var.rgb;
                float3 diffuse = directDiffuse * diffuseColor;
/// Final Color:
                float3 finalColor = diffuse + specular;
                fixed4 finalRGBA = fixed4(finalColor * 1,0);
                UNITY_APPLY_FOG(i.fogCoord, finalRGBA);
                return finalRGBA;
            }
            ENDCG
        }
        Pass {
            Name "ShadowCaster"
            Tags {
                "LightMode"="ShadowCaster"
            }
            Offset 1, 1
            Cull Back
            
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #define UNITY_PASS_SHADOWCASTER
            #include "UnityCG.cginc"
            #include "Lighting.cginc"
            #pragma fragmentoption ARB_precision_hint_fastest
            #pragma multi_compile_shadowcaster
            #pragma multi_compile_fog
            #pragma only_renderers d3d9 d3d11 glcore gles 
            #pragma target 3.0
            uniform float _TrunkWindPower;
            uniform float _TrunkWindAmplitude;
            uniform float4 _LeafWindDirection;
            uniform float _LeafWindAmplitude;
            uniform float _LeafWindPower;
            uniform sampler2D _BaseColor; uniform float4 _BaseColor_ST;
            struct VertexInput {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float2 texcoord0 : TEXCOORD0;
                float4 vertexColor : COLOR;
            };
            struct VertexOutput {
                V2F_SHADOW_CASTER;
                float2 uv0 : TEXCOORD1;
                float3 normalDir : TEXCOORD2;
                float4 vertexColor : COLOR;
            };
            VertexOutput vert (VertexInput v) {
                VertexOutput o = (VertexOutput)0;
                o.uv0 = v.texcoord0;
                o.vertexColor = v.vertexColor;
                o.normalDir = UnityObjectToWorldNormal(v.normal);
                float4 node_7790 = _Time;
                float node_7325 = (node_7790.g*_TrunkWindPower);
                float4 node_3441 = _Time;
                float node_8007 = ((o.vertexColor.r*3.141592654)+(node_3441.g*_LeafWindPower));
                v.vertex.xyz += (float3(((sin(node_7325)*_TrunkWindAmplitude)*o.vertexColor.a),0.0,((cos(node_7325)*(_TrunkWindAmplitude*0.5))*o.vertexColor.a))+(normalize((_LeafWindDirection.rgb+v.normal))*o.vertexColor.r*((sin(node_8007)+(sin((node_8007*3.0))*0.2))-cos((node_8007*5.0)))*_LeafWindAmplitude));
                o.pos = UnityObjectToClipPos( v.vertex );
                TRANSFER_SHADOW_CASTER(o)
                return o;
            }
            float4 frag(VertexOutput i) : COLOR {
                i.normalDir = normalize(i.normalDir);
                float3 normalDirection = i.normalDir;
                float4 _BaseColor_var = tex2D(_BaseColor,TRANSFORM_TEX(i.uv0, _BaseColor));
                clip(_BaseColor_var.a - 0.5);
                SHADOW_CASTER_FRAGMENT(i)
            }
            ENDCG
        }
    }
    FallBack "Diffuse"
    CustomEditor "ShaderForgeMaterialInspector"
}
